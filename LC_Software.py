# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import * # Imports all required sub classes - QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QMainWindow
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from random import randint
import contourGeneration_backend
from contourGeneration_backend import LC_Contour
import PIL.Image, cv2, numpy as np, os

class Ui_MainWindow(QMainWindow): # Main UI Window
    def setupUi(self, MainWindow):
        # Creating all UI elements - labels, buttons, sliders, checkboxes, pages, etc. Places them in required window coordinates
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1280, 720)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setAutoFillBackground(True)
        self.stackedWidget.setStyleSheet("QStackedWidget#stackedWidget{\n"
"background-color:qlineargradient(spread:repeat, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 62, 103, 255), stop:1 rgba(255, 255, 255, 255));}")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.contourGeneration_button = QtWidgets.QPushButton(self.page)
        self.contourGeneration_button.setGeometry(QtCore.QRect(440, 240, 400, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.contourGeneration_button.setFont(font)
        self.contourGeneration_button.setStyleSheet("border-radius:15px;\n"
"background-color:rgb(190, 247, 235)")
        self.contourGeneration_button.setObjectName("contourGeneration_button")
        self.lcSoftware_label = QtWidgets.QLabel(self.page)
        self.lcSoftware_label.setGeometry(QtCore.QRect(410, 20, 460, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.lcSoftware_label.setFont(font)
        self.lcSoftware_label.setAlignment(QtCore.Qt.AlignCenter)
        self.lcSoftware_label.setObjectName("lcSoftware_label")
        self.hueShearCalibration_button = QtWidgets.QPushButton(self.page)
        self.hueShearCalibration_button.setGeometry(QtCore.QRect(440, 120, 400, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.hueShearCalibration_button.setFont(font)
        self.hueShearCalibration_button.setStyleSheet("border-radius:15px;\n"
"background-color:rgb(190, 247, 235)")
        self.hueShearCalibration_button.setFlat(False)
        self.hueShearCalibration_button.setObjectName("hueShearCalibration_button")
        self.exit_button = QtWidgets.QPushButton(self.page)
        self.exit_button.setGeometry(QtCore.QRect(540, 600, 200, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.exit_button.setFont(font)
        self.exit_button.setStyleSheet("border-radius:15px;\n"
"background-color:rgb(190, 247, 235)")
        self.exit_button.setObjectName("exit_button")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(1020, 5, 200, 100))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Desktop/Contour_Mapping/logo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.previous_button = QtWidgets.QPushButton(self.page_2)
        self.previous_button.setGeometry(QtCore.QRect(100, 600, 200, 40))
        self.previous_button.setStyleSheet("border-radius:20px;\n"
"background-color:rgb(255, 255, 255)")
        self.previous_button.setObjectName("previous_button")
        self.next_button = QtWidgets.QPushButton(self.page_2)
        self.next_button.setGeometry(QtCore.QRect(980, 600, 200, 40))
        self.next_button.setStyleSheet("border-radius:20px;\n"
"background-color:rgb(255, 255, 255)")
        self.next_button.setObjectName("next_button")
        self.contourGeneration_label = QtWidgets.QLabel(self.page_2)
        self.contourGeneration_label.setGeometry(QtCore.QRect(440, 10, 400, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.contourGeneration_label.setFont(font)
        self.contourGeneration_label.setAlignment(QtCore.Qt.AlignCenter)
        self.contourGeneration_label.setObjectName("contourGeneration_label")
        self.scrollArea = QtWidgets.QScrollArea(self.page_2)
        self.scrollArea.setGeometry(QtCore.QRect(40, 50, 1200, 530))
        self.scrollArea.setAutoFillBackground(True)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1198, 528))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.chooseImage_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseImage_label.setGeometry(QtCore.QRect(30, 30, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseImage_label.setFont(font)
        self.chooseImage_label.setObjectName("chooseImage_label")
        self.setDirectoryButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.setDirectoryButton.setGeometry(QtCore.QRect(540, 30, 200, 50))
        self.setDirectoryButton.setStyleSheet("border-radius:20px;\n"
"background-color:rgb(255, 255, 255)")
        self.setDirectoryButton.setObjectName("setDirectoryButton")
        self.imageFilePath = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.imageFilePath.setGeometry(QtCore.QRect(750, 30, 800, 50))
        self.imageFilePath.setText("")
        self.imageFilePath.setObjectName("imageFilePath")
        self.chooseImageResolution_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseImageResolution_label.setGeometry(QtCore.QRect(30, 120, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseImageResolution_label.setFont(font)
        self.chooseImageResolution_label.setObjectName("chooseImageResolution_label")
        self.verticalScrollBar = QtWidgets.QScrollBar(self.scrollAreaWidgetContents)
        self.verticalScrollBar.setGeometry(QtCore.QRect(1180, 10, 16, 511))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.resolution_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.resolution_comboBox.setGeometry(QtCore.QRect(540, 120, 200, 50))
        self.resolution_comboBox.setObjectName("resolution_comboBox")
        self.resolution_comboBox.addItem("")
        self.resolution_comboBox.addItem("")
        self.resolution_comboBox.addItem("")
        self.chooseImageDenoiseKernal_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseImageDenoiseKernal_label.setGeometry(QtCore.QRect(30, 210, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseImageDenoiseKernal_label.setFont(font)
        self.chooseImageDenoiseKernal_label.setObjectName("chooseImageDenoiseKernal_label")
        self.denoiseKernel_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.denoiseKernel_comboBox.setGeometry(QtCore.QRect(540, 210, 200, 50))
        self.denoiseKernel_comboBox.setObjectName("denoiseKernel_comboBox")
        self.denoiseKernel_comboBox.addItem("")
        self.denoiseKernel_comboBox.addItem("")
        self.denoiseKernel_comboBox.addItem("")
        self.denoiseKernel_comboBox.addItem("")
        self.chooseClosedContourAreaThreshold_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseClosedContourAreaThreshold_label.setGeometry(QtCore.QRect(30, 300, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseClosedContourAreaThreshold_label.setFont(font)
        self.chooseClosedContourAreaThreshold_label.setObjectName("chooseClosedContourAreaThreshold_label")
        self.closedContourArea_horizontalSlider = QtWidgets.QSlider(self.scrollAreaWidgetContents)
        self.closedContourArea_horizontalSlider.setGeometry(QtCore.QRect(540, 300, 200, 50))
        self.closedContourArea_horizontalSlider.setMinimum(1)
        self.closedContourArea_horizontalSlider.setMaximum(300)
        self.closedContourArea_horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.closedContourArea_horizontalSlider.setObjectName("closedContourArea_horizontalSlider")
        self.chooseContourType_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseContourType_label.setGeometry(QtCore.QRect(30, 390, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseContourType_label.setFont(font)
        self.chooseContourType_label.setObjectName("chooseContourType_label")
        self.contourType_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.contourType_comboBox.setGeometry(QtCore.QRect(540, 390, 200, 50))
        self.contourType_comboBox.setObjectName("contourType_comboBox")
        self.contourType_comboBox.addItem("")
        self.contourType_comboBox.addItem("")
        self.contourType_comboBox.addItem("")
        self.contourType_comboBox.addItem("")
        self.contourType_comboBox.addItem("")
        self.contourType_comboBox.addItem("")
        self.closedContourArea_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.closedContourArea_label.setGeometry(QtCore.QRect(760, 310, 40, 30))
        self.closedContourArea_label.setText("")
        self.closedContourArea_label.setObjectName("closedContourArea_label")
        self.chooseNumberOfIntervals_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.chooseNumberOfIntervals_label.setGeometry(QtCore.QRect(30, 480, 500, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(20)
        self.chooseNumberOfIntervals_label.setFont(font)
        self.chooseNumberOfIntervals_label.setObjectName("chooseNumberOfIntervals_label")
        self.plotInterval_spinBox = QtWidgets.QSpinBox(self.scrollAreaWidgetContents)
        self.plotInterval_spinBox.setGeometry(QtCore.QRect(545, 490, 50, 25))
        self.plotInterval_spinBox.setMinimum(1)
        self.plotInterval_spinBox.setMaximum(25)
        self.plotInterval_spinBox.setObjectName("spinBox")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setEnabled(False)
        self.page_3.setObjectName("page_3")
        self.label_3 = QtWidgets.QLabel(self.page_3)
        self.label_3.setGeometry(QtCore.QRect(40, 50, 1200, 530))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.page_3)
        self.label_4.setGeometry(QtCore.QRect(440, 10, 400, 50))
        font = QtGui.QFont()
        font.setFamily("Helvetica Neue")
        font.setPointSize(25)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.stackedWidget.addWidget(self.page_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.label_6 = QtWidgets.QLabel(self.page)
        self.label_6.setGeometry(QtCore.QRect(510, 670, 260, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color:white\n"
"")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # Variables
        self.closeContourAreaTh = self.closedContourArea_horizontalSlider.value()
        self.resolution = self.resolution_comboBox.itemText(0)
        self.denoiseKernel = self.denoiseKernel_comboBox.itemText(0)
        self.contourType = self.contourType_comboBox.itemText(0)
        self.plotInterval = self.plotInterval_spinBox.value()
        print(self.closeContourAreaTh)
        print(self.resolution)
        print(self.denoiseKernel)
        print(self.contourType)
        print(self.plotInterval)
        
        # Button functions
        self.contourGeneration_button.clicked.connect(lambda:self.go_to_page(1))
        self.previous_button.clicked.connect(lambda:self.go_to_page(0))
        self.setDirectoryButton.clicked.connect(self.getImage)
        self.next_button.clicked.connect(self.show_new_window)
        self.closedContourArea_horizontalSlider.valueChanged.connect(self.valuechange)
        self.resolution_comboBox.activated.connect(self.resolutionChange)
        self.denoiseKernel_comboBox.activated.connect(self.denoiseKernelValueChange)
        self.contourType_comboBox.activated.connect(self.contourTypeChange)
        self.contourType_comboBox.activated.connect(self.contourTypeChange)
        self.plotInterval_spinBox.valueChanged.connect(self.plotIntervalChange)
        
        self.canvas = None
        self.imagePath = None
        if self.canvas is not None:
            print(self.canvas.crop_2_x, self.canvas.crop_2_y)
        
    def go_to_page(self, index):
        self.stackedWidget.setCurrentIndex(index)
    
    def getImage(self):
        self.imagePath = None
        options = QFileDialog.Options()
        fname = QFileDialog.getOpenFileName(self,"Open a File", "","All Files (*);;Python Files (*.py)", options=options)
        self.imagePath = fname[0]
        print(self.imagePath)
        self.imageFilePath.setText(self.imagePath)
    
    def show_new_window(self, checked):
        self.canvas = AnotherWindow(self)
        
    # Button Functions for Contour Generation modules used to store user selections in variables
    def valuechange(self):
        self.closedContourArea_label.setText(str(self.closedContourArea_horizontalSlider.value()))
        self.closeContourAreaTh = self.closedContourArea_horizontalSlider.value()
        print(self.closeContourAreaTh)
        
    def resolutionChange(self, index):
        self.resolution = self.resolution_comboBox.itemText(index)
        print(self.resolution)
        
    def denoiseKernelValueChange(self, index):
        self.denoiseKernel = self.denoiseKernel_comboBox.itemText(index)
        print(self.denoiseKernel)
        
    def contourTypeChange(self, index):
        self.contourType = self.contourType_comboBox.itemText(index)
        print(self.contourType)
    
    def plotIntervalChange(self, index):
        self.plotInterval = self.plotInterval_spinBox.value()
        print(self.plotInterval)

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "LC Software"))
        self.contourGeneration_button.setText(_translate("MainWindow", "Contour Generation"))
        self.lcSoftware_label.setText(_translate("MainWindow", "Liquid Crystal Imaging Software"))
        self.hueShearCalibration_button.setText(_translate("MainWindow", "Hue Vs Shear Stress Calibration"))
        self.exit_button.setText(_translate("MainWindow", "Exit"))
        self.previous_button.setText(_translate("MainWindow", "Previous"))
        self.next_button.setText(_translate("MainWindow", "Next"))
        self.contourGeneration_label.setText(_translate("MainWindow", "Contour Generation"))
        self.chooseImage_label.setText(_translate("MainWindow", "Choose Image File"))
        self.setDirectoryButton.setText(_translate("MainWindow", "Set Directory"))
        self.chooseImageResolution_label.setText(_translate("MainWindow", "Choose Image Resolution"))
        self.resolution_comboBox.setItemText(0, _translate("MainWindow", "640x480"))
        self.resolution_comboBox.setItemText(1, _translate("MainWindow", "1280x720"))
        self.resolution_comboBox.setItemText(2, _translate("MainWindow", "1920x1080"))
        self.chooseImageDenoiseKernal_label.setText(_translate("MainWindow", "Choose Image Denoise Kernel Size"))
        self.denoiseKernel_comboBox.setItemText(0, _translate("MainWindow", "3x3"))
        self.denoiseKernel_comboBox.setItemText(1, _translate("MainWindow", "5x5"))
        self.denoiseKernel_comboBox.setItemText(2, _translate("MainWindow", "7x7"))
        self.denoiseKernel_comboBox.setItemText(3, _translate("MainWindow", "9x9"))
        self.chooseClosedContourAreaThreshold_label.setText(_translate("MainWindow", "Choose Closed Contour Area Threshold"))
        self.chooseContourType_label.setText(_translate("MainWindow", "Choose Contour Type"))
        self.contourType_comboBox.setItemText(0, _translate("MainWindow", "red"))
        self.contourType_comboBox.setItemText(1, _translate("MainWindow", "green"))
        self.contourType_comboBox.setItemText(2, _translate("MainWindow", "blue"))
        self.contourType_comboBox.setItemText(3, _translate("MainWindow", "hue"))
        self.contourType_comboBox.setItemText(4, _translate("MainWindow", "shear stress"))
        self.contourType_comboBox.setItemText(5, _translate("MainWindow", "skin friction"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "Contour Generation"))
        self.label_6.setText(_translate("MainWindow", "© 2020 Engineering & Scientific Innovations, Inc."))
        self.chooseNumberOfIntervals_label.setText(_translate("MainWindow", "Choose Number of Intervals to Plot"))

class AnotherWindow(QWidget):
    """
    #This "window" is a QWidget. If it has no parent, it
    #will appear as a free-floating window as we want.
    """
    def __init__(self, parent):
        super().__init__() # create default constructor for QWidget
        # Store all variable values to pass it on to contour generation backend
        self.path = parent.imagePath
        self.ext = os.path.splitext(self.path)[-1]
        self.resolution = parent.resolution.split("x")
        self.width = int(self.resolution[0])
        self.height = int(self.resolution[1])
        denoiseKernel = parent.denoiseKernel.split("x")
        self.denoiseKernel = (int(denoiseKernel[0]), int(denoiseKernel[1]))
        self.closeContourAreaTh = int(parent.closeContourAreaTh)
        self.plotInterval = int(parent.plotInterval)
        self.contourType = parent.contourType
        self.resizedImage = self.imageReadResize()
        self.resizedImage_path = "/Users/karthikvigneshwarcuddalorebalakumar/image_resized.png"
        self.pixmap = QPixmap(self.path)
        self.setFixedSize(self.width, self.height+50)
        self.initializeUI()
        self.show()
        self.crop_button.clicked.connect(self.cropCoordValues)
        self.save_button.clicked.connect(lambda:LC_Contour(self.width, self.height, self.contourType, self.path, self.denoiseKernel, self.closeContourAreaTh, self.plotInterval, (self.crop_tl), (self.crop_br)))
        
    def initializeUI(self):
        # Initialize UI for selecting ROI
        self.setWindowTitle('Select Region Of Interest')
        self.crop_button = QPushButton('Crop', self)
        self.crop_button.resize(150, 40)
        self.crop_button.move(round(self.width/2)-200, self.height+5)
        self.crop_button.setStyleSheet("border-radius:20px;\n"
"background-color:rgb(255, 255, 255)")
        self.save_button = QPushButton('Save', self)
        self.save_button.resize(150, 40)
        self.save_button.setStyleSheet("border-radius:20px;""background-color:rgb(255, 255, 255)")
        self.save_button.move(round(self.width/2)+50, self.height+5)
        self.label = displayLabel(self)
        
    def cropCoordValues(self):
        # Save the image ROI coordinates to draw rectangle and to crop image
        self.crop_1_x = self.label.begin.x()
        self.crop_1_y = self.label.begin.y()
        self.crop_2_x = self.label.destination.x()
        self.crop_2_y = self.label.destination.y()
        self.crop_tl = (self.crop_1_x, self.crop_1_y)
        self.crop_br = (self.crop_2_x, self.crop_2_y)
        
    def imageReadResize(self):
        # Resize and save selected image ROI
        img = PIL.Image.open(self.path)
        img = img.resize((self.width, self.height), PIL.Image.LANCZOS)
        img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        cv2.imwrite('image_resized'+self.ext, img_cv)
        
class displayLabel(QLabel):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        pixmap = QPixmap(parent.resizedImage_path)
        self.pix = pixmap
        self.width = pixmap.width()
        self.height = pixmap.height()
        self.setPixmap(pixmap)
        self.setAlignment(QtCore.Qt.AlignCenter)
        self.setScaledContents(True)
        self.setMouseTracking(True)
        
        # Initialize variables
        self.antialiasing_status = False
        self.last_mouse_pos = QPoint()
        self.drawing = False
        self.pen_color = Qt.black
        self.pen_width = 2
        self.begin, self.destination = QPoint(), QPoint()
    
    # The following lines enable drawing rectangle on image
    
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawPixmap(QPoint(), self.pix)
        
        if not self.begin.isNull() and not self.destination.isNull():
            rect = QRect(self.begin, self.destination)
            painter.drawRect(rect.normalized())
    
    def mousePressEvent(self, event):
        if event.buttons() & Qt.LeftButton:
            self.begin = event.pos()
            self.destination = self.begin
            self.update()
            
    def mouseMoveEvent(self, event):
        if event.buttons() & Qt.LeftButton:
            self.destination = event.pos()
            if self.destination.x()  > self.width: # constrain the points within the window even if the mouse travels out of it
                self.destination.setX(self.width)
            elif self.destination.y()  > self.height:
                self.destination.setY(self.height)
            self.update()
    
    def mouseReleaseEvent(self, event):
        if event.buttons() & Qt.LeftButton:
            rect = QRect(self.begin, self.destination)
            painter = QPainter(self.pix)
            painter.drawRect(rect.normalized())
            
            self.begin, self.destination = QPoint(), QPoint()
            self.update()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
